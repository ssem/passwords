#!/usr/bin/env python
import os
import sys
import rec
import enchant
import argparse
import threading
from rec.basewords import Find_Basewords
from rec.chars import Find_Chars
from rec.sets import Find_Sets
from rec.complexity import Find_Complexity
from rec.entropy import Find_Entropy
from rec.lengths import Find_Lengths
from rec.mods import Find_Mods
from rec.patterns import Find_Patterns
from rec.prefixes import Find_Prefixes
from rec.suffixes import Find_Suffixes
from rec.time_and_patterns import Find_Time_And_Patterns
from rec.top_passwords import Find_Top_Passwords
from rec.years import Find_Years

def start_thread(func, args):
    p = threading.Thread(target=func, args=args)
    p.daemon = True
    p.start()
    return p

def run(f, count):
    d = enchant.DictWithPWL("en", os.path.dirname(rec.__file__) + '/spell_check.txt')
    ba = Find_Basewords()
    ch = Find_Chars()
    se = Find_Sets()
    co = Find_Complexity()
    en = Find_Entropy()
    le = Find_Lengths()
    mo = Find_Mods()
    pa = Find_Patterns()
    pr = Find_Prefixes()
    su = Find_Suffixes()
    ti = Find_Time_And_Patterns()
    to = Find_Top_Passwords()
    ye = Find_Years()
    array = []
    for line in f:
        array.append(line)
    try:f.close()
    except:pass
    t1 = start_thread(ba.parse_list, [array])
    t2 = start_thread(ch.parse_list, [array])
    t3 = start_thread(se.parse_list, [array])
    t4 = start_thread(co.parse_list, [array])
    t5 = start_thread(en.parse_list, [array])
    t6 = start_thread(le.parse_list, [array])
    t7 = start_thread(pa.parse_list, [array])
    t8 = start_thread(ti.parse_list, [array])
    t9 = start_thread(to.parse_list, [array])
    t10 = start_thread(ye.parse_list, [array])
    #t11 = start_thread(mo.parse_list, [array])
    #t12 = start_thread(pr.parse_list, [array])
    #t13 = start_thread(su.parse_list, [array])
    t1.join()
    t2.join()
    t3.join()
    t4.join()
    t5.join()
    t6.join()
    t7.join()
    t8.join()
    t9.join()
    t10.join()
    #t11.join()
    #t12.join()
    #t13.join()
    print '\nCOMPLEXITY:'
    co.print_data(count)
    print '\nCHAR:'
    ch.print_data(count)
    print '\nALL CHARS:'
    chars = ''
    for item in ch.return_data():
        chars += item[0]
    print chars
    print '\nSETS:'
    se.print_data(count)
    print '\nLENGTHS:'
    le.print_data(count)
    print '\nPATTERNS:'
    pa.print_data(count)
    print '\nTIME_AND_PATTERNS:'
    ti.print_data(count)
    print '\nBASE WORDS:'
    ba.print_data(count)
    print '\nMODS:'
    mo.print_data(count)
    print '\nPREFIXES:'
    pr.print_data(count)
    print '\nSUFFIXES:'
    su.print_data(count)
    print '\nOVERALL_ENTROPY:'
    print '{:<50}{:<10}'.format(en.total_save/en.total, 'pattern(0) - random(1)')
    print '\nENTROPY:'
    en.print_data(count)
    print '\nYEARS:'
    ye.print_data(count)
    print '\nTOP PASSWORDS:'
    to.print_data(count)

if __name__ == '__main__':
    print "\nwork in progress\n"
    if not sys.stdin.isatty():
        f = sys.stdin
        count = 10
        if '-c' in sys.argv or '--count' in sys.argv:
            try:count = int(sys.argv[sys.argv.index('-c') + 1])
            except:pass
            try:count = int(sys.argv[sys.argv.index('--count') +1])
            except:pass
    else:
        parse = argparse.ArgumentParser()
        parse.add_argument('file', help="password file")
        parse.add_argument('-c', '--count', default=10, help="# of items to print")
        args = parse.parse_args()
        f = open(args.file, 'r')
        count = int(args.count)
    run(f, count)
