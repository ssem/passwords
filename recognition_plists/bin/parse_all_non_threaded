#!/usr/bin/env python
import os
import sys
import rec
import enchant
import argparse
from rec.basewords import Find_Basewords
from rec.chars import Find_Chars
from rec.sets import Find_Sets
from rec.complexity import Find_Complexity
from rec.entropy import Find_Entropy
from rec.lengths import Find_Lengths
from rec.mods import Find_Mods
from rec.patterns import Find_Patterns
from rec.prefixes import Find_Prefixes
from rec.suffixes import Find_Suffixes
from rec.time_and_patterns import Find_Time_And_Patterns
from rec.top_passwords import Find_Top_Passwords
from rec.years import Find_Years

def run(f, count):
    d = enchant.DictWithPWL("en", os.path.dirname(rec.__file__) + '/spell_check.txt')
    ba = Find_Basewords()
    ch = Find_Chars()
    se = Find_Sets()
    co = Find_Complexity()
    en = Find_Entropy()
    le = Find_Lengths()
    mo = Find_Mods()
    pa = Find_Patterns()
    pr = Find_Prefixes()
    su = Find_Suffixes()
    ti = Find_Time_And_Patterns()
    to = Find_Top_Passwords()
    ye = Find_Years()
    for word in f:
        word = word.rstrip('\r\n')
        ba.parse_word(word)
        ch.parse_word(word)
        se.parse_word(word)
        co.parse_word(word)
        en.parse_word(word)
        le.parse_word(word)
        pa.parse_word(word)
        ti.parse_word(word)
        to.parse_word(word)
        ye.parse_word(word)
        for baseword in d.suggest(word)[:2]:
            mo.parse_word(word, baseword)
            pr.parse_word(word, baseword)
            su.parse_word(word, baseword)
    print '\nCOMPLEXITY:'
    co.print_data(count)
    print '\nCHAR:'
    ch.print_data(count)
    print '\nALL CHARS:'
    chars = ''
    for item in ch.return_data():
        chars += item[0]
    print chars
    print '\nSETS:'
    se.print_data(count)
    print '\nLENGTHS:'
    le.print_data(count)
    print '\nPATTERNS:'
    pa.print_data(count)
    print '\nTIME_AND_PATTERNS:'
    ti.print_data(count)
    print '\nBASE WORDS:'
    ba.print_data(count)
    print '\nMODS:'
    mo.print_data(count)
    print '\nPREFIXES:'
    pr.print_data(count)
    print '\nSUFFIXES:'
    su.print_data(count)
    print '\nOVERALL_ENTROPY:'
    print '{:<50}{:<10}'.format(en.total_save/en.total, 'pattern(0) - random(1)')
    print '\nENTROPY:'
    en.print_data(count)
    print '\nYEARS:'
    ye.print_data(count)
    print '\nTOP PASSWORDS:'
    to.print_data(count)

if __name__ == '__main__':
    if not sys.stdin.isatty():
        f = sys.stdin
        count = 10
        if '-c' in sys.argv or '--count' in sys.argv:
            try:count = int(sys.argv[sys.argv.index('-c') + 1])
            except:pass
            try:count = int(sys.argv[sys.argv.index('--count') +1])
            except:pass
    else:
        parse = argparse.ArgumentParser()
        parse.add_argument('file', help="password file")
        parse.add_argument('-c', '--count', default=10, help="# of items to print")
        args = parse.parse_args()
        f = open(args.file, 'r')
        count = int(args.count)
    run(f, count)
